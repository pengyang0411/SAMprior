result_IPW_MAP <- runMAP(data = data.frame(matrix_cov), if_covariates = 0, if_IPW = 1)
##--------------------------------------------
## Method 7: MAP without covariates
##--------------------------------------------
result_IPW_MAP <- runMAP(data = data.frame(matrix_cov), if_covariates = 0, if_IPW = 1)
##--------------------------------------------
## Method 7: MAP without covariates
##--------------------------------------------
result_IPW_MAP <- runMAP(data = data.frame(matrix_cov), if_covariates = 0, if_IPW = 1)
##--------------------------------------------
## Method 7: MAP without covariates
##--------------------------------------------
result_IPW_MAP <- runMAP(data = data.frame(matrix_cov), if_covariates = 0, if_IPW = 1)
##--------------------------------------------
## Method 7: MAP without covariates
##--------------------------------------------
result_IPW_MAP <- runMAP(data = data.frame(matrix_cov), if_covariates = 0, if_IPW = 1)
result_IPW_MAP
##--------------------------------------------
## Method 8: MAP with covariates
##--------------------------------------------
result_IPW_MAP_cov <- runMAP(data = data.frame(matrix_cov), if_covariates = 1, if_IPW = 1)
setwd("~/Box Sync/AbbVie/Time_saving")
setwd("~/Box Sync/AbbVie/Time_saving/Final/Code")
library(splines)
# library(fda)
# library(truncdist)
source('sourceR')
# library(fda)
# library(truncdist)
source('source.R')
library(splines)
# library(fda)
# library(truncdist)
source('source.R')
##----------------------------
## Summary data
##----------------------------
Ft <- 18 ## Final time
nT <- 7  ## Number of observations
summary_dat <- data.frame(t   = rep(seq(0, Ft, by = 3), 2),
trt = rep(c('act', 'pbo'), each = nT),
n   = c(500, 491, 470, 458, 430, 404, 384,
500, 494, 467, 444, 426, 410, 392),
y   = c(3.96, 4.22, 4.46, 4.57, 4.86, 4.95, 5.21,
4.01, 4.27, 4.71, 4.95, 5.44, 5.47, 5.89),
sd  = c(2.18, 4.07, 2.43, 2.14, 2.58, 2.66, 2.69,
2.16, 1.92, 1.67, 2.22, 2.58, 2.63, 2.77))
##--------------------------
## Fit the treatment arm
##--------------------------
sl <- 5
knots <- round((Ft + sl) / 2)
# knots <- round(seq(0, Ft + sl, length.out = 4))
# knots <- knots[-c(1, 4)]
if(file.exists('meta.data.RData')){
load('meta.data.RData')
}else{
## Simulate data for treatment arm
dat_act <- sim_summary(dat = summary_dat, type = 'act')
model_act <- lm(y ~ ns(t, knots = knots, Boundary.knots = c(0, Ft + sl)), data = dat_act)
## Simulate data for placebo arm
dat_pbo <- sim_summary(dat = summary_dat, type = 'pbo')
model_pbo <- lm(y ~ ns(t, knots = knots, Boundary.knots = c(0, Ft + sl)), data = dat_pbo)
## making plot
# pdf('Figures/Summary_data_one_knot.pdf', width = 5, height = 5)
# t_new <- seq(0, Ft + sl, by = 0.01)
# mat   <- ns(t_new, knots = knots)
# plot(summary_dat$t, summary_dat$y,
#      xlim = c(0, Ft + sl), type = 'n',
#      xlab = 'Month', ylab = 'Outcome')
# lines(summary_dat$t[summary_dat$trt == 'act'],
#       summary_dat$y[summary_dat$trt == 'act'],
#       col = 'light green', type = 'p')
# lines(summary_dat$t[summary_dat$trt == 'pbo'],
#       summary_dat$y[summary_dat$trt == 'pbo'],
#       col = 'light blue', type = 'p')
# lines(t_new, cbind(1, mat) %*% model_act$coefficients, type = 'l', col = 'light green', cex = 0.1)
# lines(t_new, cbind(1, mat) %*% model_pbo$coefficients, type = 'p', col = 'light blue', cex = 0.1)
# legend('bottomright', legend = c('Treatment', 'Placebo'),
#        col = c('light green', 'light blue'), lty = 1)
# dev.off()
save(model_act, model_pbo, file  = 'meta.data.RData')
}
## making plot
# pdf('Figures/Summary_data_one_knot.pdf', width = 5, height = 5)
t_new <- seq(0, Ft + sl, by = 0.01)
mat   <- ns(t_new, knots = knots)
plot(summary_dat$t, summary_dat$y,
xlim = c(0, Ft + sl), type = 'n',
xlab = 'Month', ylab = 'Outcome')
lines(summary_dat$t[summary_dat$trt == 'act'],
summary_dat$y[summary_dat$trt == 'act'],
col = 'light green', type = 'p')
lines(summary_dat$t[summary_dat$trt == 'pbo'],
summary_dat$y[summary_dat$trt == 'pbo'],
col = 'light blue', type = 'p')
lines(t_new, cbind(1, mat) %*% model_act$coefficients, type = 'l', col = 'light green', cex = 0.1)
lines(t_new, cbind(1, mat) %*% model_pbo$coefficients, type = 'p', col = 'light blue', cex = 0.1)
dat_act
unique(dat_act$t)
## Making sure the baseline values are 0
dat_act$y <- dat_act$y - mean(dat_act$y[dat_act$t == 0])
dat_pbo$y <- dat_pbo$y - mean(dat_pbo$y[dat_pbo$t == 0])
## making plot
# pdf('Figures/Summary_data_one_knot.pdf', width = 5, height = 5)
t_new <- seq(0, Ft + sl, by = 0.01)
mat   <- ns(t_new, knots = knots)
plot(summary_dat$t, summary_dat$y,
xlim = c(0, Ft + sl), type = 'n',
xlab = 'Month', ylab = 'Outcome')
lines(summary_dat$t[summary_dat$trt == 'act'],
summary_dat$y[summary_dat$trt == 'act'],
col = 'light green', type = 'p')
lines(summary_dat$t[summary_dat$trt == 'pbo'],
summary_dat$y[summary_dat$trt == 'pbo'],
col = 'light blue', type = 'p')
lines(t_new, cbind(1, mat) %*% model_act$coefficients, type = 'l', col = 'light green', cex = 0.1)
lines(t_new, cbind(1, mat) %*% model_pbo$coefficients, type = 'p', col = 'light blue', cex = 0.1)
legend('bottomright', legend = c('Treatment', 'Placebo'),
col = c('light green', 'light blue'), lty = 1)
summary_dat
model_act <- lm(y ~ ns(t, knots = knots, Boundary.knots = c(0, Ft + sl)), data = dat_act)
model_pbo <- lm(y ~ ns(t, knots = knots, Boundary.knots = c(0, Ft + sl)), data = dat_pbo)
## making plot
# pdf('Figures/Summary_data_one_knot.pdf', width = 5, height = 5)
t_new <- seq(0, Ft + sl, by = 0.01)
mat   <- ns(t_new, knots = knots)
plot(summary_dat$t, summary_dat$y,
xlim = c(0, Ft + sl), type = 'n',
xlab = 'Month', ylab = 'Outcome')
lines(summary_dat$t[summary_dat$trt == 'act'],
summary_dat$y[summary_dat$trt == 'act'],
col = 'light green', type = 'p')
lines(summary_dat$t[summary_dat$trt == 'pbo'],
summary_dat$y[summary_dat$trt == 'pbo'],
col = 'light blue', type = 'p')
lines(t_new, cbind(1, mat) %*% model_act$coefficients, type = 'l', col = 'light green', cex = 0.1)
lines(t_new, cbind(1, mat) %*% model_pbo$coefficients, type = 'p', col = 'light blue', cex = 0.1)
legend('bottomright', legend = c('Treatment', 'Placebo'),
col = c('light green', 'light blue'), lty = 1)
mean(dat_act$y[dat_act$t == 0])
Time <- seq(0, Ft, by = 3)
## Load the design matrix
mat <- ns(Time, knots = knots, Boundary.knots = c(0, Ft + sl))
## Estimate the observed mean at each time point
mean_act <- cbind(1, mat) %*% model_act$coefficients
mean_pbo <- cbind(1, mat) %*% model_pbo$coefficients
## Standard deviation
sd_act <- summary_dat$sd[summary_dat$trt == 'act']
sd_pbo <- summary_dat$sd[summary_dat$trt == 'pbo']
## Number of simulations
nsamp <- 10
S     <- 2000
res   <- array(0, c(nsamp, round(S / 2)))
sd_input = 1
s = 1
##------------------------------
## Simulate the data from null
##------------------------------
data <- sim_data(mean_summary = list(mean_act = mean_act,
mean_pbo = mean_pbo),
sd_summary = list(sd_act = sd_act,
sd_pbo = sd_pbo),
sd_input = sd_input,
summary_dat = summary_dat,
n = 500, rate.dropout = 0.02,
nT = nT, if.null = F, if.plot = F)
data
plot(data$t, data$y)
mean(data$y[data$t == 0])
mean_act
mean_pbo
save(model_act, model_pbo, file  = 'meta.data.RData')
run_MCMC <- function(data,
S = 10^3,
sl = 5,
nT = 7,
Ft = 18,
nburn = round(S/2),
knots = c(9)){
## Load the data
t_all <- data$t
A_all <- data$A
Y     <- data$y
nObs  <- length(Y)
## Create cubic spline matrix for control group
Cmat0 = splines::ns(t_all, knots = knots, Boundary.knots = c(0, Ft + sl), intercept = F)
L0 <- ncol(Cmat0)
## Create cubic spline matrix for treatment group
Cmat1 = splines::ns(t_all, knots = knots, Boundary.knots = c(0, Ft + sl), intercept = F)
L1 <- ncol(Cmat1)
## Dimension for the basis parameters
L  <- L0 + L1
## Create the design matrix nT x L
Design_mat   <- cbind(Cmat0, Cmat1 * A_all)
# We can run the MCMC
# SD:
f = mean(Y)
sigma = sd(Y - f)
tau = 1/sigma^2
# Recurring terms:
XtX = crossprod(Design_mat);
Xty = crossprod(Design_mat, Y)
## Estimate the control lines
# X_new <- seq(0, 1, 0.1)
post_f = array(0, c(S, nObs))
post_f0 = array(0, c(S, nObs))
post_f1 = array(0, c(S, nObs))
post_theta = array(0, c(S, L))
post_sigma = numeric(S)
post_time = post_time2 = numeric(S)
for(s in 1:S){
# print(s)
# Block 1: sample sigma (via tau)
tau = rgamma(n = 1,
shape = .01 + nObs/2,
rate = .01 + sum((Y - f)^2)/2)
sigma = 1/sqrt(tau)
# Block 2: sample beta + gamma
Q_beta = tau*XtX + diag(0.001, L)
ell_beta = tau*Xty
# Cholesky, then forward/backsolve:
ch_Q = chol(Q_beta)
theta = backsolve(ch_Q,
forwardsolve(t(ch_Q), ell_beta) +
rnorm(L))
res <- optim(par = Ft + sl, fn = loss, method = 'L-BFGS-B', lower = 0, upper = Ft + sl,
control = list(fnscale = 1, factr = 1e-4),
theta = theta, knots = knots, L0 = L0, Ft = Ft, sl = sl)
# The curve:
f = Design_mat %*% theta
f0 = Cmat0 %*% theta[1:L0]
df = Cmat1 %*% theta[-c(1:L0)]
post_f[s, ] = f
post_f0[s, ] = f0
post_f1[s, ] = df + f0
post_theta[s,] = theta
post_sigma[s] = sigma
post_time[s]  = Ft - res$par
}
mcmc_obj <- list(post_f  = post_f[-(1:nburn), ],
post_f0 = post_f0[-(1:nburn), ],
post_f1 = post_f1[-(1:nburn), ],
post_beta = post_theta[-(1:nburn), 1:L0],
post_gamma = post_theta[-(1:nburn), -(1:L0)],
post_sigma = post_sigma[-(1:nburn)],
post_time = post_time[-(1:nburn)]
)
## Evaluate the uncertainty of time difference
res <- mcmc_obj$post_time
return(list(res = res, #res_true = res_true,
mcmc_obj = mcmc_obj))
}
##-------------------------
## Run MCMC
##-------------------------
out <- run_MCMC(data = data, sl = sl, nT = nT, Ft = Ft,
knots = knots,
S = S)
# library(fda)
# library(truncdist)
source('source.R')
##-------------------------
## Run MCMC
##-------------------------
out <- run_MCMC(data = data, sl = sl, nT = nT, Ft = Ft,
knots = knots,
S = S)
run_MCMC <- function(data,
S = 10^3,
sl = 5,
nT = 7,
Ft = 18,
nburn = round(S/2),
knots = c(9)){
## Load the data
t_all <- data$t
A_all <- data$A
Y     <- data$y
nObs  <- length(Y)
## Create cubic spline matrix for control group
Cmat0 = splines::ns(t_all, knots = knots, Boundary.knots = c(0, Ft + sl), intercept = T)
L0 <- ncol(Cmat0)
## Create cubic spline matrix for treatment group
Cmat1 = splines::ns(t_all, knots = knots, Boundary.knots = c(0, Ft + sl), intercept = F)
L1 <- ncol(Cmat1)
## Dimension for the basis parameters
L  <- L0 + L1
## Create the design matrix nT x L
Design_mat   <- cbind(Cmat0, Cmat1 * A_all)
# We can run the MCMC
# SD:
f = mean(Y)
sigma = sd(Y - f)
tau = 1/sigma^2
# Recurring terms:
XtX = crossprod(Design_mat);
Xty = crossprod(Design_mat, Y)
## Estimate the control lines
# X_new <- seq(0, 1, 0.1)
post_f = array(0, c(S, nObs))
post_f0 = array(0, c(S, nObs))
post_f1 = array(0, c(S, nObs))
post_theta = array(0, c(S, L))
post_sigma = numeric(S)
post_time = post_time2 = numeric(S)
for(s in 1:S){
# print(s)
# Block 1: sample sigma (via tau)
tau = rgamma(n = 1,
shape = .01 + nObs/2,
rate = .01 + sum((Y - f)^2)/2)
sigma = 1/sqrt(tau)
# Block 2: sample beta + gamma
Q_beta = tau*XtX + diag(0.001, L)
ell_beta = tau*Xty
# Cholesky, then forward/backsolve:
ch_Q = chol(Q_beta)
theta = backsolve(ch_Q,
forwardsolve(t(ch_Q), ell_beta) +
rnorm(L))
res <- optim(par = Ft + sl, fn = loss, method = 'L-BFGS-B', lower = 0, upper = Ft + sl,
control = list(fnscale = 1, factr = 1e-4),
theta = theta, knots = knots, L0 = L0, Ft = Ft, sl = sl)
# The curve:
f = Design_mat %*% theta
f0 = Cmat0 %*% theta[1:L0]
df = Cmat1 %*% theta[-c(1:L0)]
post_f[s, ] = f
post_f0[s, ] = f0
post_f1[s, ] = df + f0
post_theta[s,] = theta
post_sigma[s] = sigma
post_time[s]  = Ft - res$par
}
mcmc_obj <- list(post_f  = post_f[-(1:nburn), ],
post_f0 = post_f0[-(1:nburn), ],
post_f1 = post_f1[-(1:nburn), ],
post_beta = post_theta[-(1:nburn), 1:L0],
post_gamma = post_theta[-(1:nburn), -(1:L0)],
post_sigma = post_sigma[-(1:nburn)],
post_time = post_time[-(1:nburn)]
)
## Evaluate the uncertainty of time difference
res <- mcmc_obj$post_time
return(list(res = res, #res_true = res_true,
mcmc_obj = mcmc_obj))
}
##-------------------------
## Run MCMC
##-------------------------
out <- run_MCMC(data = data, sl = sl, nT = nT, Ft = Ft,
knots = knots,
S = S)
# library(fda)
# library(truncdist)
source('source.R')
##-------------------------
## Run MCMC
##-------------------------
out <- run_MCMC(data = data, sl = sl, nT = nT, Ft = Ft,
knots = knots,
S = S)
n <- 200
sigma_onsite = c(1, 2)
d_grid <- c(0.5, 1, 3)
sigma_offsite = c(2, 3, 5)
n_p = 5
n_T = 7
ntree = 200
nsamp = 2000
df_grid <- expand.grid(
d_grid = d_grid,
sigma_onsite = sigma_onsite,
sigma_offsite = sigma_offsite
)
df_grid <- df_grid[which(df_grid$sigma_onsite < df_grid$sigma_offsite), ]
dim(df_grid)
dat_act
head(dat_act)
View(mean_act)
View(dat_act)
sigma_onsite = c(1, 2)
d_grid <- c(0.5, 1, 3)
sigma_offsite = c(2, 3, 5)
n_p = 5
n_T = 7
ntree = 200
nsamp = 2000
df_grid <- expand.grid(
d_grid = d_grid,
sigma_onsite = sigma_onsite,
sigma_offsite = sigma_offsite
)
df_grid <- df_grid[which(df_grid$sigma_onsite < df_grid$sigma_offsite), ]
df_grid
setwd("~/Box Sync/GitHub/SAMprior")
devtools::build_manual()
devtools::build_manual()
rlang::last_trace()`
afe;
///
``
rlang::last_trace()
pkgload::dev_help('PS_SAM_data')
devtools::build_manual()
devtools::build_manual()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
tinytex::tlmgr_install("makeindex")
devtools::build_manual()
devtools::check_manual()
check_man()
devtools::check_man()
Sys.which("makeindex")
devtools::build_manual()
library(SAMprior)
devtools::build_manual()
?PS_prior
?PS_SAM_data
library(SAMprior)
data('PS_SAM_data')
dat <- PS_SAM_data[PS_SAM_data$A == 0, ]
summary(PS_prior(formula = 'G ~ X_1 + X_2 + X_3',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_continuous', study = 'G', treat = 'A'))
library(SAMprior)
summary(PS_prior(formula = 'G ~ X_1 + X_2 + X_3',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_continuous', study = 'G', treat = 'A'))
trim <- c(0.1, 0.9)
checkmate::assert_number(trim, lower=0, upper=1)
checkmate::assert_number(trim[1], lower=0, upper=1)
checkmate::assert_number(trim[2], lower=0, upper=1)
library(SAMprior)
summary(PS_prior(formula = 'G ~ X_1 + X_2 + X_3',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_continuous', study = 'G', treat = 'A'))
summary(PS_prior.norm(formula = 'G ~ X_1 + X_2 + X_3',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_continuous', study = 'G', treat = 'A'))
summary(PS_prior.norm(formula = 'G ~ X_1 + X_2 + X_3', distance = 'glm',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_continuous', study = 'G', treat = 'A'))
summary(PS_prior.norm(formula = 'G ~ X_1 + X_2 + X_3', distance = 'glm', ratio = 1,
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_continuous', study = 'G', treat = 'A'))
data('PS_SAM_data')
## Subset the data to contain historical data and current control
dat <- PS_SAM_data[PS_SAM_data$A == 0, ]
str(dat)
summary(PS_prior(formula = 'G ~ X_1 + X_2 + X_3',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_binary', study = 'G', treat = 'A'))
summary(PS_prior(formula = 'G ~ X_1 + X_2 + X_3',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_binary', study = 'G', treat = 'A', ratio = 2))
summary(PS_prior.beta(formula = 'G ~ X_1 + X_2 + X_3',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_binary', study = 'G', treat = 'A', ratio = 2))
summary(PS_prior.beta(formula = 'G ~ X_1 + X_2 + X_3', distance = 'glm',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_binary', study = 'G', treat = 'A', ratio = 2))
summary(PS_prior(formula = 'G ~ X_1 + X_2 + X_3',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_continuous', study = 'G', treat = 'A'))
summary(PS_prior(formula = 'G ~ X_1 + X_2 + X_3',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_continuous', study = 'G', treat = 'A', ratio = 2))
summary(PS_prior(formula = 'G ~ X_1 + X_2 + X_3', distance = 'glm',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_continuous', study = 'G', treat = 'A', ratio = 2))
summary(PS_prior.norm(formula = 'G ~ X_1 + X_2 + X_3', distance = 'glm',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_continuous', study = 'G', treat = 'A', ratio = 2))
summary(PS_prior(formula = 'G ~ X_1 + X_2 + X_3',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_binary', study = 'G', treat = 'A'))
summary(PS_prior.beta(formula = 'G ~ X_1 + X_2 + X_3', distance = 'glm',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_binary', study = 'G', treat = 'A'))
summary(PS_prior.beta(formula = 'G ~ X_1 + X_2 + X_3', distance = 'glm',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_binary', study = 'G', treat = 'A', ratio = 1))
summary(PS_prior.beta(formula = 'G ~ X_1 + X_2 + X_3', distance = 'glm',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_binary', study = 'G', treat = 'A', ratio = 2))
summary(PS_prior(formula = 'G ~ X_1 + X_2 + X_3',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_binary', study = 'G', treat = 'A', ratio = 2))
library(SAMprior)
data('PS_SAM_data')
## Subset the data to contain historical data and current control
dat <- PS_SAM_data[PS_SAM_data$A == 0, ]
str(dat)
summary(PS_prior(formula = 'G ~ X_1 + X_2 + X_3',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_binary', study = 'G', treat = 'A'))
summary(PS_prior(formula = 'G ~ X_1 + X_2 + X_3',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_binary', study = 'G', treat = 'A', ratio = 2))
summary(PS_prior.beta(formula = 'G ~ X_1 + X_2 + X_3', distance = 'glm',
data = dat, ps.method = 'Matching', method = 'nearest',
outcome = 'Y_binary', study = 'G', treat = 'A', ratio = 2))
library(SAMprior)
